#! /usr/bin/env python3
# Generate a C two-dimensional array from CSV data.
import argparse
import csv

# 0 = type, 1 = array name, 2 = num rows, 3 = num cols
c_header = """\
/*
 *
 */

const int NUM_ROWS_{1} = {2};
const int NUM_COLS_{1} = {3};

const {0} {1}[{2}][{3}] =
{{
"""

# { V0, V1, V2, ... },

c_footer = '''
};
'''


parser = argparse.ArgumentParser(
        description='Convert CSV data into a two-dimensional array in C.',
        epilog='\n\n');
parser.add_argument('-i', '--input', action='store', help='Input file (CSV)')
parser.add_argument('-o', '--output', action='store', help='Output file (C)')
parser.add_argument('-t', '--type', action='store', default='int',
                    help='Array type: int, string, float')
parser.add_argument('-n', '--array_name', action='store', default='csv_array',
                    help='Array name (C)')
parser.add_argument('-v', '--verbose', action='store_true', default=False,
                    help='Enable messages')
args = parser.parse_args()


array_name = args.array_name
n_rows = 0
n_cols = 0
lines = [] # list of lists
line_len = 0
type = args.type
if type == 'string':
    type = 'char *'

if args.verbose:
    print('type', type)

# Read the input file
n_cols = 0
with open(args.input, 'r') as f:
    for line in f:
        line = line.strip()
        line = line.split(',')
        line_len = len(line)
        if line_len != n_cols:
            if n_cols == 0:
                n_cols = line_len
            else:
                raise Exception('column length mis-match')
        lines.append(line)

n_rows = len(lines)

if args.verbose:
    print('n rows', n_rows)
    print('n cols', n_cols)

# Write the output file
with open(args.output, 'w') as f:
    print(c_header.format(type, array_name, n_rows, n_cols), file=f)
    if args.type == 'string':
        for value_list in lines:
            print('    { "', '", "'.join(value_list), '" },', sep='', file=f)
    else:
        for value_list in lines:
            print('    {', ', '.join(value_list), '},', file=f)
    print(c_footer, file=f)

if args.verbose:
    print('Output "', args.output, '"', sep='')

