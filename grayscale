#!/usr/bin/env python3
# A quick and dirty utility to convert RGB color to a grayscale value.
import sys

def to_grey_by_lightness( r, g, b ):
    '''Average of min(r,g,b) and max(r,g,b).'''
    mi = r
    if g < mi: mi = g
    if b < mi: mi = b
    ma = r
    if g > ma: ma = g
    if b > ma: ma = b
    x = ( mi + ma ) / 2
    return int( x + 0.5 )

def to_grey_by_average( r, g, b ):
    '''Agerage of R, G, B.'''
    x = ( r + g + b ) / 3
    return int( x + 0.5 )

def to_grey_by_luminosity( r, g, b ):
    '''Weighted average of R, G, B.'''
    x = 0.21 * r + 0.72 * g + 0.07 * b
    return int( x + 0.5 )

def to_grey_by_brightness( r, g, b ):
    '''Weighted average of R, G, B.'''
    x = 0.299 * r + 0.587 * g + 0.114 * b
    return int( x + 0.5 )

if __name__ == '__main__':
    try:
        r = int( sys.argv[1] )
        g = int( sys.argv[2] )
        b = int( sys.argv[3] )
        g1 = to_grey_by_lightness( r, g, b )
        g2 = to_grey_by_average( r, g, b )
        g3 = to_grey_by_luminosity( r, g, b )
        g4 = to_grey_by_brightness( r, g, b )
        print( 'lightness  : {0:2X} {0:3d}'.format( g1 ) )
        print( 'average    : {0:2X} {0:3d}'.format( g2 ) )
        print( 'luminosity : {0:2X} {0:3d}'.format( g3 ) )
        print( 'brightness : {0:2X} {0:3d}'.format( g4 ) )
    except Exception as e:
        print ( e )
        print( 'greyscale [red] [green] [blue]' )

